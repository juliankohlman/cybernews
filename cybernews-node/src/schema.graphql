# The Schema
# info === a root field with a type of string than cannot be null
# 3 special root types Query, Mutation, Subscription
# Types => fields
# schema-driven development: 1. extend the schema with new root filed, 2. implement the corresponding resolver func
type AuthPayload {
	token: String
	user: User
}

enum LinkOrderByInput {
	description_ASC
	description_DESC
	url_ASC
	url_DESC
	createdAt_ASC
	createdAt_DESC
}

type User {
	id: ID!
	name: String!
	email: String!
	links: [Link!]!
}

type Link {
	id: ID!
	description: String!
	url: String!
	postedBy: User
	votes: [Vote!]!
}

type Vote {
	id: ID!
	link: Link!
	user: User!
}

type Subscription {
	newLink: Link
	newVote: Vote
}

type Query {
	info: String!
	link(id: ID!): Link
	feed(
		filter: String
		skip: Int
		first: Int
		orderBy: LinkOrderByInput
	): [Link!]!
}

type Mutation {
	post(url: String!, description: String!): Link!
	updateLink(id: ID!, url: String, description: String): Link
	deleteLink(id: ID!): Link
	signup(email: String!, password: String!, name: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload
	vote(linkId: ID!): Vote
}
